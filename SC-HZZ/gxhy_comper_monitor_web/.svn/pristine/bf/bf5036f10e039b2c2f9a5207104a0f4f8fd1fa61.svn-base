<!DOCTYPE html>
<html>
	<head>
		<title>demo.xhtml</title>
		<meta name="renderer" content="webkit|ie-comp|ie-stand"> 
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta http-equiv="keywords" content="enter,your,keywords,here" />
		<meta http-equiv="description" content="A short description of this page." />
		<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
		<style type="css/text">
            html,body{height: 100%; border: 0px;}
            body{ margin:0px auto;font-size:12px;font-family: "Microsoft YaHei", \5FAE\8F6F\96C5\9ED1, Arial, Helvetica, sans-serif;background-color: #F4F5F7;}
			button{width: 70px;}
        </style>
    	<script type="text/javascript" src="./plugins/jquery-1.10.2.min.js"></script>
    	<script type="text/javascript" src="./plugins/jquery-ui-1.10.3.min.js"></script>
		<script type="text/javascript" src="common.js"></script>
		<script type="text/javascript" src="jquery.min.js"></script>
		<script type="text/javascript" src="jquery.blockUI.js"></script>
	</head>
	<body  style="padding:0px; margin:0px;">
		<input type="text" style="display: none" id="Volume" value="200"/>
		<input type="text" style="display: none" id="channelID" value=""/>
		<input type="text" style="display: none" id="PresetID" value="1"/>
		<input type="text" style="display: none" id="Day" value="1"/>
		<input type="text"  style="display: none"id="port" value="9091"/>
		<input type="text" style="display: none" id="cameraIp" value="223.84.207.117"/>
		<input type="text" style="display: none" id="userName" value="admin"/>
		<input type="text"  style="display: none"id="password" value="schzb123"/>
		<div>
			<button type="button" onclick="startVideo()" id="start" style="width:100px;height:25px;" disabled="disabled">开启监控</button>
			<button type="button" onclick="stopVideo()" id="stop" style="width:100px;height:25px;" disabled="disabled">关闭监控</button>
			<button type="button" id="UP" style="width:50px;height:25px;" onclick="PTZ_UP()" disabled="disabled">向上</button>
			<button type="button" id="DN" style="width:50px;height:25px;" onclick="PTZ_DN()" disabled="disabled">向下</button>
			<button type="button" id="L" style="width:50px;height:25px;"  onclick="PTZ_Left()" disabled="disabled">向左</button>
			<button type="button" id="R" style="width:50px;height:25px;" onclick="PTZ_Right()" disabled="disabled">向右</button>
			<button type="button" id="Stop" style="width:50px;height:25px;" onclick="PTZ_Stop()" disabled="disabled">停止</button>
		</div>
		<div id="playerContainer" style="height: 1px;width: 100%;padding:0px;margin:0px;margin-top:10px;"></div>
    <script type="text/javascript">
	/******************************************************功能变量、方法****************************************************/
	
	$(function(){
	   var id=self.frameElement.getAttribute('id');
		$("#channelID").val(id);	
		login();
	 	startVideo();
	 	
	})
	var sdk_viewer = null; // 控件（插件）对象
	var isLogin = false;
	var Main = {
	    EventMap : ""
	}
	Main.EventMap = (function(){
    var closure = {
        formatExceotionCode: function(u32ExceptionCode){
            u32ExceptionCode = u32ExceptionCode.split(',');
            return parseInt(u32ExceptionCode, 10);
        },
        formatTaskNo: function(u32Task_No){
            u32Task_No = u32Task_No.split(',');
            return parseInt(u32Task_No, 10);
        }
    };
    return {
		/* 告警事件上报 */
		__200:function(strAlarmInfo){
			//alert(strAlarmInfo);
		}
      };
    })();
	
	var cfg = {
          id: "player",                    //加载的activex控件id
          container: "playerContainer",    //控件/插件的父节点
          name: "sdk_viewer",              //实例对象的名称，用于设置napi上报事件的入参
          events: Main.EventMap,           //控件事件map
          stPortInfo: {
              szDeviceIp: "",
              szLocalIp: "",
          },                                  //端口信息     
          stUserInfo: {                        //用户登录信息
              User: "",
              Password: ""
          },
          maxWnd: 64,                       //控件动态创建窗格的个数，不小于最大通道路数,默认64路 (可选) 
          focusColor: 'ffcc00',             //窗格获得焦点时的边框颜色，注意：参数形如'xxxxxx'，为颜色的16进制，以b g r 顺序，而不是r g b (可选) 
          unfocusColor: '747d7d',           //窗格未获得焦点时的边框颜色，注意：参数形如'xxxxxx'，为颜色的16进制，以b g r 顺序，而不是r g b (可选) 
          backgColor: '373737',             //控件背景色，注意：参数形如'xxxxxx'，为颜色的16进制，以b g r 顺序，而不是r g b (可选)
         // noCreateWnd: 'true'           
    }
   
   //流类型
   var StreamType =
   {
      LIVE: 0,    //实况流
      PICTRUE: 1, //抓拍流（jpeg）
      MJPEG: 2,    //照片流
      IMAGE_TYPE_PLATE: 3, //过车图片流
      PIC_VIEW: 4 //图片查看
    };
	
	var PtzCmd ={
		TILTUP:        	     0x0402,       // 向上
		TILTDOWN:            0x0404,       // 向下
		PANRIGHT:            0x0502,       // 向右
		PANLEFT:             0x0504,       // 向左
		LEFTUP:              0x0702,       // 左上
		LEFTDOWN:            0x0704,       // 左下
		RIGHTUP:             0x0802,       // 右上
		RIGHTDOWN:           0x0804,       // 右下
		ALLSTOP:             0x0901       // 全停命令字 
	}
     var PresetCmd = {
		SET_PRESET:           0,            // 设置预置位
		CLE_PRESET:           1,            // 清除预置位
		GOTO_PRESET:          2             // 转到预置位
	 }
	 
	 var LiveStream = {
		LIVE_STREAM_INDEX_MAIN:    0,   // 主流
		LIVE_STREAM_INDEX_AUX:     1,   // 辅流
		LIVE_STREAM_INDEX_THIRD:   2    // 第三流
	 }
	 
	 var Protocal = {
		TRANSPROTOCAL_RTPTCP:      1,         //TCP
		TRANSPROTOCAL_RTPUDP:      2          // UDP
	 }
	 
	 var MediaFileFormat = {
		MEDIA_FILE_MP4:            0,           // mp4格式的媒体文件
		MEDIA_FILE_TS:             1            // TS格式的媒体文件  TS media file */
	 }
	 
	 var PictureFormat = {
		PICTURE_BMP:               0,                  // 图片格式为bmp格式
		PICTURE_JPG:               1                   // 图片格式为jpg格式
	 }
	 
	 var EventType ={
		ALL:                       0,        // 所有的存储
		MOTIONDETECTION:           4,        // 运动检测事件存储
		DIGITALINPUT:              5,        // 数字输入事件存储 
		VIDEOLOSS:                 7,        // 视频丢失事件存储
		INVALID:                   0xFF      // 无效值
	}  
    var PlayControl ={
	    NETDEV_PLAY_CTRL_PLAY:             0,           /* 开始播放  Play */
		NETDEV_PLAY_CTRL_PAUSE:            1,           /* 暂停播放  Pause */
		NETDEV_PLAY_CTRL_RESUME:           2,           /* 恢复播放  Resume */
		NETDEV_PLAY_CTRL_GETPLAYTIME:      3,           /* 获取播放进度  Obtain playing time */
		NETDEV_PLAY_CTRL_SETPLAYTIME:      4,           /* 设置播放进度  Configure playing time */
		NETDEV_PLAY_CTRL_GETPLAYSPEED:     5,           /* 获取播放速度  Obtain playing speed */
		NETDEV_PLAY_CTRL_SETPLAYSPEED:     6,           /* 设置播放速度  Configure playing speed */
		NETDEV_PLAY_CTRL_SINGLE_FRAME:     7            /* 设置单帧播放  Configure single frame playing speed */
	}	
    
	/**********************************************************************************************************/
	
	/****************************************初始化控件begin****************************************/
	var resultList = [];
        cfg["stUserInfo"]["User"] = document.getElementById("userName").value;         // 用户名
        cfg["stUserInfo"]["Password"] = document.getElementById("password").value;      // 密码
        cfg["stPortInfo"]["szDeviceIp"] = document.getElementById("cameraIp").value;   // 相机IP
       
        $("#playerContainer").show();
        $("#playerContainer").css("height", "600px");
    	sdk_viewer = new Utils.Player(cfg);                                       //初始化控件 
        var retcode = sdk_viewer.execFunction("NetSDKSetPlayWndNum" , 4);         //分屏 
        if(0!=retcode){
            alert("实况窗口实例化失败");
        }
    var DeviceHandle = -1;
	var CloudHandle = -1;
    /****************************************初始化控件end****************************************/
    function login() {
    	var port=$("#port").val();
		var cameraIp=$("#cameraIp").val();
		var userName=$("#userName").val();
		var password=$("#password").val();
		var SDKRet = sdk_viewer.execFunction("NETDEV_Login", cameraIp, port,userName,password);
		if(-1 == SDKRet)
		{
			alert("登录失败");
		}
        else{ 
		    var result = JSON.parse(SDKRet);
		    DeviceHandle = result.UserID;
//             document.getElementById("start").disabled = false;
//             document.getElementById("login").disabled = true;
//             document.getElementById("logout").disabled = false;
// 			document.getElementById("CommnQuery").disabled = false;
// 			document.getElementById("EventQuery").disabled = false;
// 			document.getElementById("playbackbytime").disabled = false;
// 			document.getElementById("stopplayback").disabled = false;
// 			document.getElementById("downloadbytime").disabled = false;
// 			document.getElementById("stopdownload").disabled = false;
// 			document.getElementById("GetProgress").disabled = false;
// 			document.getElementById("SetProgress").disabled = false;
// 			document.getElementById("Resume").disabled = false;
// 			document.getElementById("Pause").disabled = false;
		    $("#playerContainer").css("height", "600px");
            
	        isLogin = true;
	    }
       
    }
    
    // 注销控件
    function logout() {
		sdk_viewer.execFunction("NETDEV_Logout", DeviceHandle);
		DeviceHandle = -1;
        document.getElementById("login").disabled = false;
		document.getElementById("logout").disabled = true;
        document.getElementById("start").disabled = true;
        document.getElementById("stop").disabled = true;
		document.getElementById("snatchPic").disabled = true;
		document.getElementById("startRecord").disabled = true;
		document.getElementById("stopRecord").disabled = true;
		document.getElementById("NW").disabled = true;
		document.getElementById("UP").disabled = true;
		document.getElementById("NE").disabled = true;
		document.getElementById("L").disabled = true;
		document.getElementById("R").disabled = true;
		document.getElementById("Stop").disabled = true;
		document.getElementById("SW").disabled = true;
		document.getElementById("DN").disabled = true;
		document.getElementById("SE").disabled = true;
		document.getElementById("setsound").disabled = true;
		document.getElementById("opensound").disabled = true;
		document.getElementById("closesound").disabled = true;
		document.getElementById("SetPreset").disabled = true;
		document.getElementById("GotoPreset").disabled = true;
		document.getElementById("DeletePreset").disabled = true;
    }
	
	function Cloudlogin()
	{
		var SDKRet = -1;
		var SDKRet = sdk_viewer.execFunction("NETDEV_LoginCloud", document.getElementById("URL").value,document.getElementById("CloudUsername").value, document.getElementById("CloudPassword").value);
		if(-1 == SDKRet)
		{
			alert("云登录失败");
		}
        else{
		CloudHandle = SDKRet;
		document.getElementById("Cloudlogin").disabled = true;
		document.getElementById("Devlogin").disabled = false;
		document.getElementById("GetCloudDevList").disabled = false;
		
		}
	}
	function GetCloudDevList()
	{
	    var SDKRet = sdk_viewer.execFunction("NETDEV_GetCloudDevList", CloudHandle);
		if(1 != SDKRet)
		{
			alert(SDKRet);
		}
		else{
			alert("设备发现失败");
		}
	}
	function Devlogin()
	{
		var SDKRet = 0;
		var dataMap = {
                      szDeviceName:document.getElementById("CloudDevname").value,
                      szDevicePassword:document.getElementById("CloudDevPassword").value,
					  dwT2UTimeout:0
					  }

        jsonStr = JSON.stringify(dataMap);
		var SDKRet = sdk_viewer.execFunction("NETDEV_LoginCloudDev", CloudHandle, jsonStr);
		if(-1 == SDKRet)
		{
			alert("设备登录失败");
		}
        else{
		    var result = JSON.parse(SDKRet);
		    DeviceHandle = result.UserID;	
// 		    document.getElementById("start").disabled = false;
//             document.getElementById("logout").disabled = false;
// 			document.getElementById("CommnQuery").disabled = false;
// 			document.getElementById("EventQuery").disabled = false;
// 			document.getElementById("playbackbytime").disabled = false;
// 			document.getElementById("stopplayback").disabled = false;
// 			document.getElementById("downloadbytime").disabled = false;
// 			document.getElementById("stopdownload").disabled = false;
// 			document.getElementById("GetProgress").disabled = false;
// 			document.getElementById("SetProgress").disabled = false;
// 			document.getElementById("Resume").disabled = false;
// 			document.getElementById("Pause").disabled = false;
		    $("#playerContainer").css("height", "600px");
            
	        DevisLogin = true;
		}
	}
  
  /************************************************实况 相关**************************************************/	  
    // 启流
    function startVideo() {
	    var dataMap = {
                      dwChannelID:document.getElementById("channelID").value, 
                      dwStreamType:LiveStream.LIVE_STREAM_INDEX_MAIN,
					  dwLinkMode:Protocal.TRANSPROTOCAL_RTPTCP,
					  dwFluency:0
                      }

        jsonStr = JSON.stringify(dataMap);
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		
		var retcode = sdk_viewer.execFunction("NETDEV_RealPlay", parseInt(ResourceId), DeviceHandle, jsonStr);
        if (0 != retcode) {
                alert("播放实况失败。");
        } 
		else {        
            document.getElementById("start").disabled = false;
            document.getElementById("stop").disabled = false;
			document.getElementById("UP").disabled = false;
			document.getElementById("R").disabled = false;
 		    document.getElementById("Stop").disabled = false;
		    document.getElementById("DN").disabled = false;
			 document.getElementById("L").disabled = false;
// 			document.getElementById("snatchPic").disabled = false;
// 		    document.getElementById("startRecord").disabled = false;
// 			document.getElementById("NW").disabled = false; 		    
// 			document.getElementById("NE").disabled = false; 		   		
// 		    document.getElementById("SW").disabled = false;	
// 			document.getElementById("SE").disabled = false;
// 			document.getElementById("opensound").disabled = false;
// 			document.getElementById("SetPreset").disabled = false;
// 			document.getElementById("GotoPreset").disabled = false;
// 			document.getElementById("DeletePreset").disabled = false;
        }
    }
    
    // 停流
    function stopVideo() {
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
        var retcode = sdk_viewer.execFunction("NETDEV_StopRealPlay", parseInt(ResourceId));  //关闭视频流  
        if (0 != retcode) {
            alert("停流失败。");
        } 
		else {           
            document.getElementById("start").disabled = false;
            document.getElementById("stop").disabled = true;
        }
    }
    
	// 截屏
	function snatchPic() {
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_CapturePicture", parseInt(ResourceId), "C:\\NETDEV\\Pic\\netDev", PictureFormat.PICTURE_JPG);
		var msg = "snatchPic success path C:\\NETDEV\\Pic\\netDev";
		if (0 != retcode) {
			msg = "snatchPic fail";
		} 
		alert(msg);
	}
	
	//开始本地录像
	function startRecord(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_SaveRealData",parseInt(ResourceId),"C:\\NETDEV\\Record\\netDev",MediaFileFormat.MEDIA_FILE_MP4);
	    if(0!=retcode){
	       alert("start fail ");
	    }else{
	       document.getElementById("startRecord").disabled = true;
		   document.getElementById("stopRecord").disabled = false;
		}
	}
	
	//停止本地录像
	function stopRecord(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_StopSavaRealData", parseInt(ResourceId));
	    if(0!=retcode){
	        alert("stop fail");
	    }
	    else{
	       document.getElementById("startRecord").disabled = false;
		   document.getElementById("stopRecord").disabled = true;
	       alert("Save path C:\\NETDEV\\Record\\netDev");
	    }
	}
	
	//播放音频
	function opensound(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_OpenSound",parseInt(ResourceId));//打开声音 
	    if(0!=retcode){
	      alert("Open sound fail");
	    }
	    else{
	      document.getElementById("opensound").disabled = true;
		  document.getElementById("closesound").disabled = false;
		  document.getElementById("setsound").disabled = false;
		  document.getElementById("getsound").disabled = false;
	    }
	}
	
	//停止播放音频
	function closesound(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_CloseSound",parseInt(ResourceId));   //停止声音 
	    if(0!=retcode){
	        alert("Close sound fail");
	    }
	    else{
	       document.getElementById("opensound").disabled = false;
		   document.getElementById("closesound").disabled = true;
		   document.getElementById("setsound").disabled = true;	
		   document.getElementById("getsound").disabled = true;	   
	    }
	}
	
	function setsound(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_SetSoundVolume",parseInt(ResourceId), document.getElementById("Volume").value);   //停止声音 
	    if(0!=retcode){
	        alert("Set sound fail");
	    }
	}
	
	function Getsound(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_GetSoundVolume",parseInt(ResourceId));   //停止声音 
	    if(-1==retcode){
	        alert("Set sound fail");
	    }
		else
		{
			var msg = "Vloume:";
			msg += retcode;
			alert(msg);
		}
	}
	
	/******************** 云台控制 ***************************/
	function PTZ_NW(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.LEFTUP,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_UP(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.TILTUP,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_Stop(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.ALLSTOP,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_NE(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.RIGHTUP,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_Left(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.PANLEFT,5);
		if(0!= retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_Right(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.PANRIGHT,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_SW(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.LEFTDOWN,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_DN(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.TILTDOWN,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_SE(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZControl",parseInt(ResourceId),PtzCmd.RIGHTDOWN,5);
		if(0 != retcode)
		{
			alert("ptz control fail");
		}
    }
	
	function PTZ_SetPreset(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZPreset",parseInt(ResourceId),PresetCmd.SET_PRESET,document.getElementById("PresetID").value, document.getElementById("PresetID").value);
		if(0 != retcode)
		{
			alert("Preset control fail");
		}
    }

	function PTZ_GotoPreset(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZPreset",parseInt(ResourceId),PresetCmd.GOTO_PRESET,document.getElementById("PresetID").value, document.getElementById("PresetID").value);
		if(0 != retcode)
		{
			alert("Preset control fail");
		}
    }

	function PTZ_DeletePreset(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var retcode = sdk_viewer.execFunction("NETDEV_PTZPreset",parseInt(ResourceId),PresetCmd.CLE_PRESET,document.getElementById("PresetID").value, document.getElementById("PresetID").value);
		if(0 != retcode)
		{
			alert("Preset control fail");
		}
    }
	
	/******************** 回放 ***************************/	
	var PlayBackHandle = -1;
	var FindHandle = -1;
	var PlayBackBeginTime = -1;
	var PlayBackEndTime = -1;
	var DownLoadHandle = -1;
	function getLocalTime(nS){     
		return new Date(parseInt(nS) * 1000).toLocaleString().substr(0,17)   
							}     
 
	function EventQuery(){
		var vBeginTime = (new Date().getTime())/1000;
		var vEndTime = (new Date().getTime())/1000 - 24*3600;
		var dataMap = {
					  szFileName:0,
                      dwChannelID:$("channelID").val(), 
                      dwFileType:EventType.ALL,
					  tBeginTime:vBeginTime,
					  tEndTime:vEndTime
                      }

        jsonStr = JSON.stringify(dataMap);
		var SDKRet = sdk_viewer.execFunction("NETDEV_FindFile",DeviceHandle,jsonStr);
		if(-1 != SDKRet)
		{
			FindHandle = SDKRet;
			document.getElementById("FindNextFile").disabled = false;
			alert("Find OK!Please Click 'Find Next File' button to Get File");
		}
		else{
			alert("Not find");
		}
		
    }
	
	function CommnQuery(){
		var vBeginTime = (new Date().getTime())/1000;
		var vEndTime = (new Date().getTime())/1000 - 24*3600;
		var dataMap = {
					  szFileName:0,
                      dwChannelID:document.getElementById("channelID").value, 
                      dwFileType:EventType.ALL,
					  tBeginTime:vBeginTime,
					  tEndTime:vEndTime
                      }

        jsonStr = JSON.stringify(dataMap);
	    var SDKRet = sdk_viewer.execFunction("NETDEV_FindFile",DeviceHandle,jsonStr);
		if(-1 != SDKRet)
		{
			FindHandle = SDKRet;
			document.getElementById("FindNextFile").disabled = false;
			alert("Find OK!Please Click 'Find Next File' button to Get File");
		}
		else{
			alert("Not find");
		}
    }
	
	function FindNextFile()
	{
		var SDKRet = sdk_viewer.execFunction("NETDEV_FindNextFile",FindHandle);
		if(-1 != SDKRet)
		{
			var result = JSON.parse(SDKRet);
		    PlayBackBeginTime = result.tBeginTime;
			PlayBackEndTime = result.tEndTime;
			var dataMap = {
					  BeginTime:getLocalTime(PlayBackBeginTime),
                      EndTime:getLocalTime(PlayBackEndTime)
                      }

        jsonStr = JSON.stringify(dataMap);
		alert(jsonStr);	
			
		}
		else
		{
			alert("Not find");
		}
	
	}
	
	function playbackbytime(){
		var dataMap = {
					  dwChannelID:document.getElementById("channelID").value, 
					  tBeginTime:PlayBackBeginTime,
					  tEndTime:PlayBackEndTime,
					  dwLinkMode:Protocal.TRANSPROTOCAL_RTPTCP,
					  dwFileType:EventType.ALL,
					  dwDownloadSpeed:3
                      }
        jsonStr = JSON.stringify(dataMap);
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_PlayBack", parseInt(ResourceId), DeviceHandle,jsonStr);
		if(-1 == retcode)
		{
			alert("playback fail");
		}
    }
	
	function stopplayback(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
	    var retcode = sdk_viewer.execFunction("NETDEV_StopPlayback", ResourceId);
		if(0 != retcode)
		{
			alert("stop fail");
		}
    }
	
	function downloadbytime(){
		var dataMap = {
					  dwChannelID:document.getElementById("channelID").value, 
					  tBeginTime:PlayBackBeginTime,
					  tEndTime:PlayBackEndTime,
					  dwLinkMode:Protocal.TRANSPROTOCAL_RTPTCP,
					  dwFileType:EventType.ALL,
					  dwDownloadSpeed:3
                      }
		jsonStr = JSON.stringify(dataMap);
	    var retcode = sdk_viewer.execFunction("NETDEV_GetFileByTime",DeviceHandle ,jsonStr , "C:\\NETDEV_\\DownLoad\\netDev", MediaFileFormat.MEDIA_FILE_MP4);
		if(-1 == retcode)
		{
			alert("Download fail");
		}
		DownLoadHandle = retcode;
		alert("Downloading ... Please click 'stop download'button to save file")
		
    }
	
	function stopdownload(){
	    var retcode = sdk_viewer.execFunction("NETDEV_StopDownload",DownLoadHandle);
		if(0 != retcode)
		{
			alert("stop fail");
		}
		alert("Download succeed! path C:\\NETDEV_\\DownLoad\\netDev")
    }
	
	function GetProgress(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var dataMap = {
					  pulTime:0,
					  pulSpeed:0
                      }
		jsonStr = JSON.stringify(dataMap);
	    var SDKRet = sdk_viewer.execFunction("NETDEV_PlayBackControl",parseInt(ResourceId),PlayControl.NETDEV_PLAY_CTRL_GETPLAYTIME ,jsonStr);
		if(-1 != SDKRet)
		{
			var result = JSON.parse(SDKRet);
		    var PlayTime = result.PlayTime;
			alert(PlayTime);
		}
		else{
			alert("Not find");
		}
    }
	
	function SetProgress(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var dataMap = {
					  pulTime:0,
					  pulSpeed:20
                      }
		jsonStr = JSON.stringify(dataMap);
	    var SDKRet = sdk_viewer.execFunction("NETDEV_PlayBackControl",parseInt(ResourceId),PlayControl.NETDEV_PLAY_CTRL_SETPLAYTIME ,jsonStr);
		if(-1 == SDKRet)
		{
			alert("Set Play Time Fail");
		}

    }
	
	function Resume(){
		var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var dataMap = {
					  pulTime:0,
					  pulSpeed:0
                      }
		jsonStr = JSON.stringify(dataMap);
	    var SDKRet = sdk_viewer.execFunction("NETDEV_PlayBackControl",parseInt(ResourceId),PlayControl.NETDEV_PLAY_CTRL_RESUME ,jsonStr);
		if(-1 == SDKRet)
		{
			alert("Resume Fail");
		}
	}
	
	function Pause(){
	    var ResourceId = sdk_viewer.execFunction("NetSDKGetFocusWnd");
		var dataMap = {
					  pulTime:0,
					  pulSpeed:0
                      }
		jsonStr = JSON.stringify(dataMap);
	    var SDKRet = sdk_viewer.execFunction("NETDEV_PlayBackControl",parseInt(ResourceId),PlayControl.NETDEV_PLAY_CTRL_PAUSE ,jsonStr);
		if(-1 == retcode)
		{
			alert("Pause fail");
		}
    }
	
	 function AlarmInfoCallback(alarminfo){
		alert("hello");
	 }
	 
	 
	 
	function getIframeParams(iframeId) {
    var regexpParam = /\??([\w\d%]+)=([\w\d%]*)&?/g; //分离参数的正则表达式
    var targetEle = document.getElementById(iframeId);
     
    var paramMap = null;
     
    if(!!targetEle) {
        var url = targetEle.src; //取得iframe的url
         
        var ret;
         
        paramMap = {};//初始化结果集
         
        //开始循环查找url中的参数，并以键值对形式放入结果集
        while((ret = regexpParam.exec(url)) != null) {
                //ret[1]是参数名，ret[2]是参数值
            paramMap[ret[1]] = ret[2];
        }
    }
     
    return paramMap; //返回结果集
}
    </script>
	</body>
</html>
